{"componentChunkName":"component---src-templates-blog-post-js","path":"/firebase-starter/","result":{"data":{"site":{"siteMetadata":{"title":"Andy Walking"}},"markdownRemark":{"id":"3d2bade6-687d-5e87-92b0-87638eb07b11","excerpt":"會員服務是網站常見的必備功能，透過會員制度能提供給使用者更加客製化的體驗，像是： 收藏、紀錄網站內容 根據會員喜好提供的客製化推薦 在這次的文章就是要透過 React + firebase 製作一個最簡易的會員功能。 產生一個 firebase 專案 在開始使用 firebase…","html":"<p>會員服務是網站常見的必備功能，透過會員制度能提供給使用者更加客製化的體驗，像是：</p>\n<ol>\n<li>收藏、紀錄網站內容</li>\n<li>根據會員喜好提供的客製化推薦</li>\n</ol>\n<p>在這次的文章就是要透過 React + firebase 製作一個最簡易的會員功能。</p>\n<h2>產生一個 firebase 專案</h2>\n<p>在開始使用 firebase 服務前，你需要先執行以下幾個步驟：</p>\n<ol>\n<li>\n<p>使用 google 帳號進行註冊</p>\n</li>\n<li>\n<p>根據自身的開發環境（如筆者是寫網頁)，因此會選擇 <em>web</em> 來產生專案 (如下圖)\n<img src=\"https://i.imgur.com/O9yZLiH.png\" style=\"width:100%\"></p>\n<!-- ![](https://i.imgur.com/O9yZLiH.png) -->\n<h5>(圖片來源：firebase 官網)</h5>\n</li>\n<li>\n<p>進入專案後，會看到 firebase 內提供了多種的服務，如：</p>\n<ol>\n<li>Authentication: 驗證、管理使用者</li>\n<li>Storage: 儲存資料的</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2>產生一個 react 專案</h2>\n<p>在上面，我們已經產生了基本的 <em>firebase</em> 專案，接著要創建 <em>react</em> 專案才能將 <em>firebase</em> 的服務引入專案內。</p>\n<p>在這邊我們就根據 <em>React-Router</em>教學的產生方式，來產生一個全新的 react 專案。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> create vite@latest <span class=\"token punctuation\">[</span>name-of-your-project<span class=\"token punctuation\">]</span> -- <span class=\"token parameter variable\">--template</span> react</code></pre></div>\n<p>接著執行</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>現在你應該就會看到一個全新的 react 初始畫面（如下圖）\n<img src=\"https://i.imgur.com/XsSOvKY.png\" style=\"width:100%\"></p>\n<!-- ![](https://i.imgur.com/XsSOvKY.png) -->\n<p>恭喜你已經創立了一個全新的專案，那我們繼續前進吧～</p>\n<h3>創立 react-router</h3>\n<p>筆者使用的是 v16.14 版本的設定，下方為筆者所設計最基本的會員登錄架構</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- /(home)\n    - /login\n    - /register</code></pre></div>\n<p>目標：</p>\n<ol>\n<li>成功註冊後，會跳轉回登錄頁面 (<code class=\"language-text\">/login</code>)</li>\n<li>成功登錄後，會跳轉回首頁 (<code class=\"language-text\">/</code>)</li>\n</ol>\n<p>要怎麼產生不同的 router 呢？在這邊我們會需要用到下面幾個從<code class=\"language-text\">react-router-dom</code> 取出的方法</p>\n<ol>\n<li><code class=\"language-text\">createBrowserRouter</code>: <em>Router</em>的設定，意外的跟<em>Vue</em>很類似，如下：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> routers <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>HomePage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">errorElement</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>ErrorPage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/register\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>RegisterPage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">errorElement</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>ErrorPage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>LoginPage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">errorElement</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>ErrorPage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接著，筆者的理解為 <strong>react 在最初會先將虛擬的 DOM 掛在到實際網頁上的某個節點上</strong>，同理，控制不同 router 產生內容的元件<code class=\"language-text\">&lt;RouterProvider/></code>，也同樣需放入初始的<em>root-dom</em>內。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createBrowserRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> RouterProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>RouterProvider router<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>routers<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;App /> */</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果想更深入認識 React-Router ，可以看我的筆記：<a href=\"&#x27;https://southandy.github.io/andy-walking/React-router/&#x27;\">我所不知道的 React-Router</a></p>\n<hr>\n<h2>將 firebase 服務引入專案</h2>\n<p>這次要使用的是 Authentication 這項服務\n<img src=\"https://i.imgur.com/5zEWuXV.png\" alt=\"\"></p>\n<h5>(圖片來源：firebase 官網)</h5>\n<hr>\n<h3>參考資料：</h3>","frontmatter":{"title":"用firebase-auth來建立簡易的會員功能吧！（上）","date":"December 09, 2022","description":"會員服務是網站常見的功能，透過會員服務能提供給使用者更加客製化的體驗..."}},"previous":{"fields":{"slug":"/shadow-copy/"},"frontmatter":{"title":"(筆記) 深拷貝和淺拷貝"}},"next":{"fields":{"slug":"/React-router/"},"frontmatter":{"title":"(筆記)我所不知道的React-Router"}}},"pageContext":{"id":"3d2bade6-687d-5e87-92b0-87638eb07b11","previousPostId":"c459811e-2a35-52f4-8b85-00fdd0ecc85a","nextPostId":"eb5b4ddc-037f-511d-a66a-00716aa27ea0"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}