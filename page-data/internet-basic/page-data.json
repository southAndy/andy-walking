{"componentChunkName":"component---src-templates-blog-post-js","path":"/internet-basic/","result":{"data":{"site":{"siteMetadata":{"title":"Andy Walking"}},"markdownRemark":{"id":"e8473dc9-879d-5f31-88d3-b99d204be053","excerpt":"HTTP 是什麼？ 是所謂 超文本傳輸協定，全名是 HyperText Transfer Protocol ，內容規範了客戶端要求(request)以及伺服器回應(response)的標準，是使用 TCP 作為資料傳遞方式。 HTTP / HTTPS 差在哪？\n兩個都是超文本傳輸協定，而多出來的那個 s…","html":"<h3>HTTP 是什麼？</h3>\n<p>是所謂 <strong>超文本傳輸協定</strong>，全名是 <em>HyperText Transfer Protocol</em> ，內容規範了客戶端要求(<em>request</em>)以及伺服器回應(<em>response</em>)的標準，是使用 <em>TCP</em> 作為資料傳遞方式。</p>\n<blockquote>\n<p><strong>HTTP / HTTPS 差在哪？</strong>\n兩個都是<strong>超文本傳輸協定</strong>，而多出來的那個 <strong>s</strong> 就是所謂 <strong>security</strong>\nHTTPS 就是加入了 SSL/TLS 的保密設定，避免傳輸資料過程被竊取。\n<a href=\"https://tw.alphacamp.co/blog/http-https-difference\">https://tw.alphacamp.co/blog/http-https-difference</a></p>\n</blockquote>\n<br>\n<h3>HTTP 之 Client-Side / Server-Side</h3>\n<p>一般來說，資料傳遞上這個行為可以從兩個視角來理解：</p>\n<ol>\n<li><strong>客戶端 (client-side)</strong></li>\n<li><strong>伺服器端 (server-side)</strong></li>\n</ol>\n<blockquote>\n<p><strong>資料傳遞是什麼？怎麼做？</strong></p>\n<p>由客戶端發出請求(request) >>> 伺服器端 (server) 收到後，會根據請求回傳回應(response)，來看看實例：</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/vlZua66.png\" alt=\"\"></p>\n<p>某一天，你受不了自己的爛螢幕，懶惰的你很當然的想透過網購來購買，於是你打開 <strong>chrome</strong>想找一些跟<strong>螢幕</strong>有關的產品。</p>\n<p>到這邊我們可以轉換兩個名詞：</p>\n<ol>\n<li>chrome(瀏覽器) => 客戶端</li>\n<li>在瀏覽器輸入關鍵字並送出：<strong>螢幕</strong> => 發出需求(request)</li>\n</ol>\n<hr>\n<br>\n<p><strong>請求 (request) 的架構</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token number\">1</span>. 發出要求的客戶端<span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">)</span>: www.google.com\n<span class=\"token number\">2</span>. URL:https://<span class=\"token punctuation\">..</span>.s.dadasdasd/com\n<span class=\"token number\">3</span>. 要求<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>方法: GET <span class=\"token operator\">||</span> POST / DELET</code></pre></div>\n<br>\n<h3>GET / POST 的比較</h3>\n<p>當需要夾帶<strong>敏感資訊</strong> 通常會使用 <strong>POST</strong> 的方法，以下是兩者的比較：</p>\n<p>它的<code class=\"language-text\">body:content-type</code>作為告訴 server 這次資料類型</p>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods/POST\">https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods/POST</a></p>\n<p>接著<strong>Google 資料庫</strong>接收到這個<strong>請求 (request)</strong>，將資料回傳(<strong>response</strong>)並且呈現在畫面上，轉換起來就是：</p>\n<ol>\n<li>Google 資料庫 => 伺服器端</li>\n<li>資料回傳 => 回傳回應(response)</li>\n</ol>\n<p>而每個回應內都會包含：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1</span>. 狀態訊息:200<span class=\"token punctuation\">(</span>成功<span class=\"token punctuation\">)</span> / <span class=\"token number\">401</span><span class=\"token punctuation\">(</span>權限問題<span class=\"token punctuation\">)</span> / <span class=\"token number\">404</span><span class=\"token punctuation\">(</span>路徑錯誤<span class=\"token punctuation\">)</span>/\n<span class=\"token number\">2</span>. response body:包含請求的資料內容<span class=\"token punctuation\">(</span>ex:螢幕資訊<span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上就是最基本的資料傳遞流程。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>客戶端，有時候也能是伺服器媒介</li>\n<li>請求(request)跟回應(response)一次可發出>=1 個</li>\n</ol>\n<p>常見的<strong>客戶端媒介</strong>(又稱為 user-agent ):</p>\n<ol>\n<li>browser</li>\n<li>mobile</li>\n<li>electrical-application (家電)</li>\n<li>web-crawler (網路爬蟲)</li>\n</ol>\n<h3>你看到的畫面怎麼來的？</h3>\n<p>就是由一堆的請求跟回覆所組成</p>\n<blockquote>\n<p>以下以 Google 搜尋 flag 為例：</p>\n<p><img src=\"https://i.imgur.com/d8g3b5s.png\" alt=\"\"></p>\n</blockquote>\n<p>再進一步細看：</p>\n<p><img src=\"https://i.imgur.com/dLnFQLa.png\" alt=\"\"></p>\n<p>... to be continued</p>","frontmatter":{"title":"網際網路基本","date":"November 26, 2022","description":"身為前端工程師，不能不認識網路世界！"}},"previous":{"fields":{"slug":"/webpack/"},"frontmatter":{"title":"Webpack 核心概念"}},"next":{"fields":{"slug":"/shadow-copy/"},"frontmatter":{"title":"(筆記) 深拷貝和淺拷貝"}}},"pageContext":{"id":"e8473dc9-879d-5f31-88d3-b99d204be053","previousPostId":"7a7465e8-7348-5800-96f4-9122a91b52fc","nextPostId":"c459811e-2a35-52f4-8b85-00fdd0ecc85a"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}